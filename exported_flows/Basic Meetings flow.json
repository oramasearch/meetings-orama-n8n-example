{
  "name": "Basic Meetings flow",
  "nodes": [
    {
      "parameters": {
        "formTitle": "Submit CSV",
        "formFields": {
          "values": [
            {
              "fieldLabel": "CSV",
              "fieldType": "file",
              "multipleFiles": false,
              "acceptFileTypes": ".csv",
              "requiredField": true
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.formTrigger",
      "typeVersion": 2.3,
      "position": [
        -1696,
        -32
      ],
      "id": "eca36fa2-5800-41e7-8863-d066b9e441e2",
      "name": "On form submission",
      "webhookId": "3c8cb2d3-4c0e-4e44-bef8-390f5f251b55"
    },
    {
      "parameters": {
        "binaryPropertyName": "CSV",
        "options": {}
      },
      "type": "n8n-nodes-base.extractFromFile",
      "typeVersion": 1,
      "position": [
        -1456,
        -32
      ],
      "id": "fc75ebff-227b-42dd-9c0e-c32c91a4bc8a",
      "name": "Extract from File"
    },
    {
      "parameters": {
        "jsCode": "const finalArray = [];\nlet chunk = []\nconst chunkSize = 100;\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  chunk.push({\n    id: `${data['Meeting_UID']}`,\n    summary: data['Summary'],\n    date: data['Date'],\n    meeting_item: data['Item_UID'],\n    [\"Meeting Uid\"]: data['Meeting_UID']\n\n  });\n  if (chunk.length >= chunkSize) {\n    finalArray.push({ data: chunk });\n    chunk = [];\n  }\n}\n\nif (chunk.length) {\n  finalArray.push({ data: chunk });\n}\n\nreturn finalArray;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1136,
        -32
      ],
      "id": "e6b7e7fc-5151-4b8c-8c81-e9ebe7a0e71a",
      "name": "Extract Meeting summary"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{\t$env.ORAMA_CORE_WRITER_URL }}/v1/collections/{{$env.ORAMA_CORE_COLLECTION_NAME}}/indexes/meetings-summaries/insert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $env.ORAMA_CORE_COLLECTION_WRITE_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.data) }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 0,
              "batchInterval": 500
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -880,
        -32
      ],
      "id": "d0a8d9ad-c862-437e-9875-3681e18395eb",
      "name": "Save into Meetings"
    },
    {
      "parameters": {
        "method": "POST",
        "url": "={{\t$env.ORAMA_CORE_WRITER_URL }}/v1/collections/{{$env.ORAMA_CORE_COLLECTION_NAME}}/indexes/meetings-utterances/insert",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "=Bearer {{ $env.ORAMA_CORE_COLLECTION_WRITE_KEY }}"
            }
          ]
        },
        "sendBody": true,
        "specifyBody": "json",
        "jsonBody": "={{ JSON.stringify($json.data) }}",
        "options": {
          "batching": {
            "batch": {
              "batchSize": 0,
              "batchInterval": 50
            }
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -688,
        272
      ],
      "id": "d6d7a7ef-50bc-4310-b6f2-090fed4e9a16",
      "name": "Save meeting utterances"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -544,
        112
      ],
      "id": "6feda9eb-2007-4f07-9835-2cec3faeee98",
      "name": "Merge"
    },
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.3,
      "position": [
        -176,
        -400
      ],
      "id": "e44d5338-e575-40a1-a049-13c401d7e199",
      "name": "When chat message received",
      "webhookId": "757f494f-935f-48dc-8e8c-a99006813f33"
    },
    {
      "parameters": {
        "toolDescription": "This is meetings_search_tool, it retrieves a list of meetings, that contain 'meeting uid', summary, meeting date and subject id (meeting_item).",
        "method": "POST",
        "url": "={{$env.ORAMA_CORE_READER_URL}}/v1/collections/{{$env.ORAMA_CORE_COLLECTION_NAME}}/search?api-key={{ $env.ORAMA_CORE_COLLECTION_READ_KEY }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "hybrid"
            },
            {
              "name": "indexes",
              "value": "={{[\"meetings-summaries\"]}}"
            },
            {
              "name": "=term",
              "value": "={{ $fromAI('Search_Term', `This is a hybrid search, by meaning and keywords.`, 'string') }}"
            },
            {
              "name": "threshold",
              "value": "={{ 0.3 }}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "dataField": "hits"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        352,
        -128
      ],
      "id": "ca66eac9-85ee-40e0-a36c-da3c5b2c0f58",
      "name": "meetings_search_tool",
      "notesInFlow": true
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "mode": "list",
          "value": "gpt-4.1-mini"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        -80,
        -128
      ],
      "id": "0bf7807e-3903-4056-8f89-1563f9e81654",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "ORQ4FsXP6AiWfQo7",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "You are a helpful assistant, with access to meeting transcriptions, users will ask questions about meetings and dialogues that happened in the past. Whenever you search by date with any tool convert the user date to YYYY-MM-DD format. When searching utterances try to first find the Meeting UID and use it as term if user is inquiring about specific meeting, if needed use meetings_search_tool to find the meeting UID\n\nYour task is:\nPerform the following steps\n1 use the meetings_search_tool to find the relevant meetings\n2 if the user inquires about meeting details use meeting_utterance_search_tool to search for specific meeting context\n\n## Tools\nmeetings_search_tool it returns the most relevant 10 meetings. when searching by date use YYYY-MM-DD format\n\nThe meeting_utterance_search_tool expects the following parameters:\n* query: a search sentence for hybrid retrieval of relevant utterances in all meetings, the result contains snippet which contains up to 4 utterances (for context), but also meeting_id shich matches the id of result of meetings_search_tool \n\nPlease assist the user with his prompts to find the most relevant information"
        }
      },
      "id": "4327b492-4c39-4b11-9bfb-b340f3c30efa",
      "name": "Agent",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        96,
        -400
      ]
    },
    {
      "parameters": {
        "toolDescription": "This is meeting_utterance_search_tool , it retrieves a list of meetings, that contain id (which is a unique meeting id), summary, meeting date and subject id (meeting_item).",
        "method": "POST",
        "url": "={{$env.ORAMA_CORE_READER_URL}}/v1/collections/{{$env.ORAMA_CORE_COLLECTION_NAME}}/search?api-key={{ $env.ORAMA_CORE_COLLECTION_READ_KEY }}",
        "sendBody": true,
        "bodyParameters": {
          "parameters": [
            {
              "name": "mode",
              "value": "hybrid"
            },
            {
              "name": "=term",
              "value": "={{ $fromAI('Utterances', `This is a hybrid search, by meaning and keywords. convert dates to yyyy-mm-dd when possible`, 'string') }}"
            },
            {
              "name": "indexes",
              "value": "={{[\"meetings-utterances\"]}}"
            },
            {
              "name": "threshold",
              "value": "={{0.2}}"
            }
          ]
        },
        "options": {},
        "optimizeResponse": true,
        "dataField": "hits"
      },
      "type": "n8n-nodes-base.httpRequestTool",
      "typeVersion": 4.2,
      "position": [
        576,
        -128
      ],
      "id": "d2e3d75f-9c84-44d9-b9db-5652e255d7ee",
      "name": "meeting_utterance_search_tool",
      "notesInFlow": true
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        144,
        -128
      ],
      "id": "57ae10fa-fb88-4727-a8b3-54c84b859b71",
      "name": "Simple Memory"
    },
    {
      "parameters": {
        "jsCode": "const finalArray = [];\nlet chunk = []\nconst chunkSize = 50;\n\nfor (const item of $input.all()) {\n  const data = item.json;\n  const contextSize = 1;\n  const normalized = data.Transcript.replace(/\\r\\n/g, '\\n').replace(/\\r/g, '\\n');\n  const split = normalized.split('\\n').filter(line => line.trim() !== '');\n\n  // strict mode: require enough lines for full window\n  if (split.length < 2 * contextSize + 1) {\n    // either skip completely (strict)\n    // continue;\n\n    // OR fallback: make one snippet with whatever lines exist (flexible)\n    chunk.push({\n      id: data['Meeting_UID'],\n      snippet: split.join(\"\\n\"),\n      date: data['Date'],\n      start: 0,\n      end: split.length\n    });\n  } else {\n    for (let idx = contextSize; idx < split.length - contextSize; idx++) {\n      const start = idx - contextSize;\n      const end = idx + contextSize + 1;\n\n      const contextWindow = split.slice(start, end);\n\n      chunk.push({\n        id: `${data['Meeting_UID']}-${start}-${end}`,\n        meeting_id: data['Meeting_UID'],\n        snippet: contextWindow.join(\"\\n\"),\n        start,\n        end\n      });\n\n      if (chunk.length >= chunkSize) {\n        finalArray.push({ data: chunk });\n        chunk = [];\n      }\n    }\n  }\n}\n\nif (chunk.length) {\n  finalArray.push({ data: chunk });\n}\n\nreturn finalArray;"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -896,
        272
      ],
      "id": "5291fa79-0218-48b0-9bb8-9b6d338fb925",
      "name": "Extract Meeting utterances"
    },
    {
      "parameters": {
        "batchSize": 2,
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        -1136,
        176
      ],
      "id": "b1ce1d8f-12ee-4735-9aeb-4f04bab6bd7c",
      "name": "Loop over meetings"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -352,
        112
      ],
      "id": "d0f9d7a8-98b4-4290-b499-10aa7fca4f94",
      "name": "No Operation, do nothing"
    }
  ],
  "pinData": {},
  "connections": {
    "On form submission": {
      "main": [
        [
          {
            "node": "Extract from File",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract from File": {
      "main": [
        [
          {
            "node": "Extract Meeting summary",
            "type": "main",
            "index": 0
          },
          {
            "node": "Loop over meetings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract Meeting summary": {
      "main": [
        [
          {
            "node": "Save into Meetings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save meeting utterances": {
      "main": [
        [
          {
            "node": "Loop over meetings",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Save into Meetings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "When chat message received": {
      "main": [
        [
          {
            "node": "Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "meetings_search_tool": {
      "ai_tool": [
        [
          {
            "node": "Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "meeting_utterance_search_tool": {
      "ai_tool": [
        [
          {
            "node": "Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "Simple Memory": {
      "ai_memory": [
        [
          {
            "node": "Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "Extract Meeting utterances": {
      "main": [
        [
          {
            "node": "Save meeting utterances",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Loop over meetings": {
      "main": [
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ],
        [
          {
            "node": "Extract Meeting utterances",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "No Operation, do nothing",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "419a5a05-4adf-48e3-b1c3-cdf8a612800f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "26c11fbe07bbbbc831b29a2f7d28656e9f15e521e0284d472bfb167e7b4486c7"
  },
  "id": "70wjv4pDwYaOhq1K",
  "tags": []
}